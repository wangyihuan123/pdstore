package pdtransform.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Generator" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("pdtransform.dal.PDGenerator");
 * @author PDGen
 */
public class PDGenerator implements PDInstance {

	public static final GUID typeId = new GUID("fa5c1f278e0ede11980f9a097666e103"); 

	public static final GUID roleMapId = new GUID("015d1f278e0ede11980f9a097666e103");
	public static final GUID roleOutputTypeId = new GUID("0b5d1f278e0ede11980f9a097666e103");
	public static final GUID roleOrderId = new GUID("b5ba85348e0ede11980f9a097666e103");
	public static final GUID roleOutputTemplateId = new GUID("ff5c1f278e0ede11980f9a097666e103");
	public static final GUID roleInputTypeId = new GUID("fd5c1f278e0ede11980f9a097666e103");
	public static final GUID roleGeneratorApplicationsId = new GUID("f05c1f278e0ede11980f9a097666e102");

	static {
		DALClassRegister.addDataClass(typeId, PDGenerator.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDGenerator:" + name;
		else
			return "PDGenerator:" + id;
	}
	/**
	 * Creates an PDGenerator object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDGenerator(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDGenerator object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDGenerator(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDGenerator load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDGenerator)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "map".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDMap getMap() throws PDStoreException {
	 	return (PDMap)pdWorkingCopy.getInstance(this, roleMapId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "map".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDMap> getMaps() throws PDStoreException {
	 	Set<PDMap> result = new HashSet<PDMap>();
	 	GUID PDMapTypeId = new GUID("fb5c1f278e0ede11980f9a097666e103");
		pdWorkingCopy.getInstances(this, roleMapId, PDMap.class, PDMapTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "map".
	 * If the given instance is null, nothing happens.
	 * @param map the instance to connect
	 * @throws PDStoreException
	 */
	public void addMap(GUID map) throws PDStoreException {

			if (map != null) {
				
				pdWorkingCopy.addLink(this.id, roleMapId, map);
			}

	}

	/**
	 * Connects this instance to the given instance using role "map".
	 * If the given instance is null, nothing happens.
	 * @param map the instance to connect
	 * @throws PDStoreException
	 */
	public void addMap(PDMap map) throws PDStoreException {
		if (map != null) {
			addMap(map.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "map".
	 * @throws PDStoreException
	 */
	public void removeMap() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleMapId, 
			pdWorkingCopy.getInstance(this, roleMapId));
	}

	/**
	 * Removes the link from this instance through role "map" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.map.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeMap(Object map) throws PDStoreException {
		if (map==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleMapId, map);
	}

   /**
	 * Connects this instance to the given instance using role "map".
	 * If there is already an instance connected to this instance through role "map", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param map the instance to connect
	 * @throws PDStoreException
	 */
	public void setMap(GUID map) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleMapId, map);	
	}
	/**
	 * Connects this instance to the given instance using role "map".
	 * If there is already an instance connected to this instance through role "map", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param map the instance to connect
	 * @throws PDStoreException
	 */
	public void setMap(PDMap map) throws PDStoreException {
		setMap(map.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "output type".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDType getOutputType() throws PDStoreException {
	 	return (PDType)pdWorkingCopy.getInstance(this, roleOutputTypeId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "output type".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDType> getOutputTypes() throws PDStoreException {
	 	Set<PDType> result = new HashSet<PDType>();
	 	GUID PDTypeTypeId = new GUID("518a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleOutputTypeId, PDType.class, PDTypeTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "output type".
	 * If the given instance is null, nothing happens.
	 * @param outputType the instance to connect
	 * @throws PDStoreException
	 */
	public void addOutputType(GUID outputType) throws PDStoreException {

			if (outputType != null) {
				
				pdWorkingCopy.addLink(this.id, roleOutputTypeId, outputType);
			}

	}

	/**
	 * Connects this instance to the given instance using role "output type".
	 * If the given instance is null, nothing happens.
	 * @param outputType the instance to connect
	 * @throws PDStoreException
	 */
	public void addOutputType(PDType outputType) throws PDStoreException {
		if (outputType != null) {
			addOutputType(outputType.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "output type".
	 * @throws PDStoreException
	 */
	public void removeOutputType() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleOutputTypeId, 
			pdWorkingCopy.getInstance(this, roleOutputTypeId));
	}

	/**
	 * Removes the link from this instance through role "output type" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.outputType.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeOutputType(Object outputType) throws PDStoreException {
		if (outputType==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleOutputTypeId, outputType);
	}

   /**
	 * Connects this instance to the given instance using role "output type".
	 * If there is already an instance connected to this instance through role "output type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param outputType the instance to connect
	 * @throws PDStoreException
	 */
	public void setOutputType(GUID outputType) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleOutputTypeId, outputType);	
	}
	/**
	 * Connects this instance to the given instance using role "output type".
	 * If there is already an instance connected to this instance through role "output type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param outputType the instance to connect
	 * @throws PDStoreException
	 */
	public void setOutputType(PDType outputType) throws PDStoreException {
		setOutputType(outputType.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "order".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDOrder getOrder() throws PDStoreException {
	 	return (PDOrder)pdWorkingCopy.getInstance(this, roleOrderId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "order".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDOrder> getOrders() throws PDStoreException {
	 	Set<PDOrder> result = new HashSet<PDOrder>();
	 	GUID PDOrderTypeId = new GUID("b2ba85348e0ede11980f9a097666e103");
		pdWorkingCopy.getInstances(this, roleOrderId, PDOrder.class, PDOrderTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "order".
	 * If the given instance is null, nothing happens.
	 * @param order the instance to connect
	 * @throws PDStoreException
	 */
	public void addOrder(GUID order) throws PDStoreException {

			if (order != null) {
				
				pdWorkingCopy.addLink(this.id, roleOrderId, order);
			}

	}

	/**
	 * Connects this instance to the given instance using role "order".
	 * If the given instance is null, nothing happens.
	 * @param order the instance to connect
	 * @throws PDStoreException
	 */
	public void addOrder(PDOrder order) throws PDStoreException {
		if (order != null) {
			addOrder(order.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "order".
	 * @throws PDStoreException
	 */
	public void removeOrder() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleOrderId, 
			pdWorkingCopy.getInstance(this, roleOrderId));
	}

	/**
	 * Removes the link from this instance through role "order" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.order.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeOrder(Object order) throws PDStoreException {
		if (order==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleOrderId, order);
	}

   /**
	 * Connects this instance to the given instance using role "order".
	 * If there is already an instance connected to this instance through role "order", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param order the instance to connect
	 * @throws PDStoreException
	 */
	public void setOrder(GUID order) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleOrderId, order);	
	}
	/**
	 * Connects this instance to the given instance using role "order".
	 * If there is already an instance connected to this instance through role "order", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param order the instance to connect
	 * @throws PDStoreException
	 */
	public void setOrder(PDOrder order) throws PDStoreException {
		setOrder(order.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "output template".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public GUID getOutputTemplate() throws PDStoreException {
	 	return (GUID)pdWorkingCopy.getInstance(this, roleOutputTemplateId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "output template".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<GUID> getOutputTemplates() throws PDStoreException {
	 	Set<GUID> result = new HashSet<GUID>();
	 	GUID GUIDTypeId = new GUID("538a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleOutputTemplateId, GUID.class, GUIDTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "output template".
	 * If the given instance is null, nothing happens.
	 * @param outputTemplate the instance to connect
	 * @throws PDStoreException
	 */
	public void addOutputTemplate(GUID outputTemplate) throws PDStoreException {

			if (outputTemplate != null) {
				
				pdWorkingCopy.addLink(this.id, roleOutputTemplateId, outputTemplate);
			}

	}


	/**
	 * Removes the link from this instance through role "output template".
	 * @throws PDStoreException
	 */
	public void removeOutputTemplate() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleOutputTemplateId, 
			pdWorkingCopy.getInstance(this, roleOutputTemplateId));
	}

	/**
	 * Removes the link from this instance through role "output template" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.outputTemplate.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeOutputTemplate(Object outputTemplate) throws PDStoreException {
		if (outputTemplate==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleOutputTemplateId, outputTemplate);
	}

   /**
	 * Connects this instance to the given instance using role "output template".
	 * If there is already an instance connected to this instance through role "output template", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param outputTemplate the instance to connect
	 * @throws PDStoreException
	 */
	public void setOutputTemplate(GUID outputTemplate) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleOutputTemplateId, outputTemplate);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "input type".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDType getInputType() throws PDStoreException {
	 	return (PDType)pdWorkingCopy.getInstance(this, roleInputTypeId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "input type".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDType> getInputTypes() throws PDStoreException {
	 	Set<PDType> result = new HashSet<PDType>();
	 	GUID PDTypeTypeId = new GUID("518a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleInputTypeId, PDType.class, PDTypeTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "input type".
	 * If the given instance is null, nothing happens.
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void addInputType(GUID inputType) throws PDStoreException {

			if (inputType != null) {
				
				pdWorkingCopy.addLink(this.id, roleInputTypeId, inputType);
			}

	}

	/**
	 * Connects this instance to the given instance using role "input type".
	 * If the given instance is null, nothing happens.
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void addInputType(PDType inputType) throws PDStoreException {
		if (inputType != null) {
			addInputType(inputType.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "input type".
	 * @throws PDStoreException
	 */
	public void removeInputType() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleInputTypeId, 
			pdWorkingCopy.getInstance(this, roleInputTypeId));
	}

	/**
	 * Removes the link from this instance through role "input type" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.inputType.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeInputType(Object inputType) throws PDStoreException {
		if (inputType==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleInputTypeId, inputType);
	}

   /**
	 * Connects this instance to the given instance using role "input type".
	 * If there is already an instance connected to this instance through role "input type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void setInputType(GUID inputType) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleInputTypeId, inputType);	
	}
	/**
	 * Connects this instance to the given instance using role "input type".
	 * If there is already an instance connected to this instance through role "input type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void setInputType(PDType inputType) throws PDStoreException {
		setInputType(inputType.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "generator applications".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDGeneratorApplication getGeneratorApplications() throws PDStoreException {
	 	return (PDGeneratorApplication)pdWorkingCopy.getInstance(this, roleGeneratorApplicationsId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "generator applications".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDGeneratorApplication> getGeneratorApplicationss() throws PDStoreException {
	 	Set<PDGeneratorApplication> result = new HashSet<PDGeneratorApplication>();
	 	GUID PDGeneratorApplicationTypeId = new GUID("e45c1f278e0ede11980f9a097666e103");
		pdWorkingCopy.getInstances(this, roleGeneratorApplicationsId, PDGeneratorApplication.class, PDGeneratorApplicationTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "generator applications".
	 * If the given instance is null, nothing happens.
	 * @param generatorApplications the instance to connect
	 * @throws PDStoreException
	 */
	public void addGeneratorApplications(GUID generatorApplications) throws PDStoreException {

			if (generatorApplications != null) {
				
				pdWorkingCopy.addLink(this.id, roleGeneratorApplicationsId, generatorApplications);
			}

	}

	/**
	 * Connects this instance to the given instance using role "generator applications".
	 * If the given instance is null, nothing happens.
	 * @param generatorApplications the instance to connect
	 * @throws PDStoreException
	 */
	public void addGeneratorApplications(PDGeneratorApplication generatorApplications) throws PDStoreException {
		if (generatorApplications != null) {
			addGeneratorApplications(generatorApplications.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "generator applications".
	 * @throws PDStoreException
	 */
	public void removeGeneratorApplications() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleGeneratorApplicationsId, 
			pdWorkingCopy.getInstance(this, roleGeneratorApplicationsId));
	}

	/**
	 * Removes the link from this instance through role "generator applications" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.generatorApplications.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeGeneratorApplications(Object generatorApplications) throws PDStoreException {
		if (generatorApplications==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleGeneratorApplicationsId, generatorApplications);
	}

   /**
	 * Connects this instance to the given instance using role "generator applications".
	 * If there is already an instance connected to this instance through role "generator applications", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param generatorApplications the instance to connect
	 * @throws PDStoreException
	 */
	public void setGeneratorApplications(GUID generatorApplications) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleGeneratorApplicationsId, generatorApplications);	
	}
	/**
	 * Connects this instance to the given instance using role "generator applications".
	 * If there is already an instance connected to this instance through role "generator applications", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param generatorApplications the instance to connect
	 * @throws PDStoreException
	 */
	public void setGeneratorApplications(PDGeneratorApplication generatorApplications) throws PDStoreException {
		setGeneratorApplications(generatorApplications.getId());
	}

}
