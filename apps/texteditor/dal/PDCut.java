package texteditor.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Cut" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("texteditor.dal.PDCut");
 * @author PDGen
 */
public class PDCut implements PDInstance {

	public static final GUID typeId = new GUID("3c08266554d111e09c2a001e6805726d"); 

	public static final GUID roleWordId = new GUID("3c08266f54d111e09c2a001e6805726d");
	public static final GUID roleTypeId = new GUID("ee32adf0f68b11df860e1cc1dec00ed3");

	static {
		DALClassRegister.addDataClass(typeId, PDCut.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDCut:" + name;
		else
			return "PDCut:" + id;
	}
	/**
	 * Creates an PDCut object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDCut(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDCut object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDCut(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
		// set has-type link as specified in the model, if it does not exist yet
		if (workingCopy.getInstance(this, PDStore.HAS_TYPE_ROLEID) == null)
			workingCopy.addLink(id, PDStore.HAS_TYPE_ROLEID, typeId);
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDCut load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDCut)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "word".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDWord getWord() throws PDStoreException {
	 	return (PDWord)pdWorkingCopy.getInstance(this, roleWordId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "word".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDWord> getWords() throws PDStoreException {
	 	Set<PDWord> result = new HashSet<PDWord>();
	 	GUID PDWordTypeId = new GUID("3c08266254d111e09c2a001e6805726d");
		pdWorkingCopy.getInstances(this, roleWordId, PDWord.class, PDWordTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "word".
	 * If the given instance is null, nothing happens.
	 * @param word the instance to connect
	 * @throws PDStoreException
	 */
	public void addWord(GUID word) throws PDStoreException {

			if (word != null) {
				
				pdWorkingCopy.addLink(this.id, roleWordId, word);
			}

	}

	/**
	 * Connects this instance to the given instance using role "word".
	 * If the given instance is null, nothing happens.
	 * @param word the instance to connect
	 * @throws PDStoreException
	 */
	public void addWord(PDWord word) throws PDStoreException {
		if (word != null) {
			addWord(word.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "word".
	 * @throws PDStoreException
	 */
	public void removeWord() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleWordId, 
			pdWorkingCopy.getInstance(this, roleWordId));
	}

	/**
	 * Removes the link from this instance through role "word" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.word.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeWord(Object word) throws PDStoreException {
		if (word==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleWordId, word);
	}

   /**
	 * Connects this instance to the given instance using role "word".
	 * If there is already an instance connected to this instance through role "word", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param word the instance to connect
	 * @throws PDStoreException
	 */
	public void setWord(GUID word) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleWordId, word);	
	}
	/**
	 * Connects this instance to the given instance using role "word".
	 * If there is already an instance connected to this instance through role "word", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param word the instance to connect
	 * @throws PDStoreException
	 */
	public void setWord(PDWord word) throws PDStoreException {
		setWord(word.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "type".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDType getType() throws PDStoreException {
	 	return (PDType)pdWorkingCopy.getInstance(this, roleTypeId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "type".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDType> getTypes() throws PDStoreException {
	 	Set<PDType> result = new HashSet<PDType>();
	 	GUID PDTypeTypeId = new GUID("518a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleTypeId, PDType.class, PDTypeTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "type".
	 * If the given instance is null, nothing happens.
	 * @param type the instance to connect
	 * @throws PDStoreException
	 */
	public void addType(GUID type) throws PDStoreException {

			if (type != null) {
				
				pdWorkingCopy.addLink(this.id, roleTypeId, type);
			}

	}

	/**
	 * Connects this instance to the given instance using role "type".
	 * If the given instance is null, nothing happens.
	 * @param type the instance to connect
	 * @throws PDStoreException
	 */
	public void addType(PDType type) throws PDStoreException {
		if (type != null) {
			addType(type.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "type".
	 * @throws PDStoreException
	 */
	public void removeType() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleTypeId, 
			pdWorkingCopy.getInstance(this, roleTypeId));
	}

	/**
	 * Removes the link from this instance through role "type" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.type.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeType(Object type) throws PDStoreException {
		if (type==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleTypeId, type);
	}

   /**
	 * Connects this instance to the given instance using role "type".
	 * If there is already an instance connected to this instance through role "type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param type the instance to connect
	 * @throws PDStoreException
	 */
	public void setType(GUID type) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleTypeId, type);	
	}
	/**
	 * Connects this instance to the given instance using role "type".
	 * If there is already an instance connected to this instance through role "type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param type the instance to connect
	 * @throws PDStoreException
	 */
	public void setType(PDType type) throws PDStoreException {
		setType(type.getId());
	}

}
