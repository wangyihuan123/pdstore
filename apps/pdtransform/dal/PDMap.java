package pdtransform.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Map" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("pdtransform.dal.PDMap");
 * @author PDGen
 */
public class PDMap implements PDInstance {

	public static final GUID typeId = new GUID("fb5c1f278e0ede11980f9a097666e103"); 

	public static final GUID roleOutputInstanceId = new GUID("055d1f278e0ede11980f9a097666e103");
	public static final GUID roleInputTypeId = new GUID("095d1f278e0ede11980f9a097666e103");
	public static final GUID roleOutputRoleId = new GUID("075d1f278e0ede11980f9a097666e103");
	public static final GUID roleInputRoleId = new GUID("035d1f278e0ede11980f9a097666e103");

	static {
		DALClassRegister.addDataClass(typeId, PDMap.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDMap:" + name;
		else
			return "PDMap:" + id;
	}
	/**
	 * Creates an PDMap object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDMap(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDMap object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDMap(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDMap load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDMap)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "output instance".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public GUID getOutputInstance() throws PDStoreException {
	 	return (GUID)pdWorkingCopy.getInstance(this, roleOutputInstanceId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "output instance".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<GUID> getOutputInstances() throws PDStoreException {
	 	Set<GUID> result = new HashSet<GUID>();
	 	GUID GUIDTypeId = new GUID("538a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleOutputInstanceId, GUID.class, GUIDTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "output instance".
	 * If the given instance is null, nothing happens.
	 * @param outputInstance the instance to connect
	 * @throws PDStoreException
	 */
	public void addOutputInstance(GUID outputInstance) throws PDStoreException {

			if (outputInstance != null) {
				
				pdWorkingCopy.addLink(this.id, roleOutputInstanceId, outputInstance);
			}

	}


	/**
	 * Removes the link from this instance through role "output instance".
	 * @throws PDStoreException
	 */
	public void removeOutputInstance() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleOutputInstanceId, 
			pdWorkingCopy.getInstance(this, roleOutputInstanceId));
	}

	/**
	 * Removes the link from this instance through role "output instance" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.outputInstance.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeOutputInstance(Object outputInstance) throws PDStoreException {
		if (outputInstance==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleOutputInstanceId, outputInstance);
	}

   /**
	 * Connects this instance to the given instance using role "output instance".
	 * If there is already an instance connected to this instance through role "output instance", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param outputInstance the instance to connect
	 * @throws PDStoreException
	 */
	public void setOutputInstance(GUID outputInstance) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleOutputInstanceId, outputInstance);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "input type".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDType getInputType() throws PDStoreException {
	 	return (PDType)pdWorkingCopy.getInstance(this, roleInputTypeId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "input type".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDType> getInputTypes() throws PDStoreException {
	 	Set<PDType> result = new HashSet<PDType>();
	 	GUID PDTypeTypeId = new GUID("518a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleInputTypeId, PDType.class, PDTypeTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "input type".
	 * If the given instance is null, nothing happens.
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void addInputType(GUID inputType) throws PDStoreException {

			if (inputType != null) {
				
				pdWorkingCopy.addLink(this.id, roleInputTypeId, inputType);
			}

	}

	/**
	 * Connects this instance to the given instance using role "input type".
	 * If the given instance is null, nothing happens.
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void addInputType(PDType inputType) throws PDStoreException {
		if (inputType != null) {
			addInputType(inputType.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "input type".
	 * @throws PDStoreException
	 */
	public void removeInputType() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleInputTypeId, 
			pdWorkingCopy.getInstance(this, roleInputTypeId));
	}

	/**
	 * Removes the link from this instance through role "input type" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.inputType.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeInputType(Object inputType) throws PDStoreException {
		if (inputType==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleInputTypeId, inputType);
	}

   /**
	 * Connects this instance to the given instance using role "input type".
	 * If there is already an instance connected to this instance through role "input type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void setInputType(GUID inputType) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleInputTypeId, inputType);	
	}
	/**
	 * Connects this instance to the given instance using role "input type".
	 * If there is already an instance connected to this instance through role "input type", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param inputType the instance to connect
	 * @throws PDStoreException
	 */
	public void setInputType(PDType inputType) throws PDStoreException {
		setInputType(inputType.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "output role".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDRole getOutputRole() throws PDStoreException {
	 	return (PDRole)pdWorkingCopy.getInstance(this, roleOutputRoleId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "output role".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDRole> getOutputRoles() throws PDStoreException {
	 	Set<PDRole> result = new HashSet<PDRole>();
	 	GUID PDRoleTypeId = new GUID("528a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleOutputRoleId, PDRole.class, PDRoleTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "output role".
	 * If the given instance is null, nothing happens.
	 * @param outputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void addOutputRole(GUID outputRole) throws PDStoreException {

			if (outputRole != null) {
				
				pdWorkingCopy.addLink(this.id, roleOutputRoleId, outputRole);
			}

	}

	/**
	 * Connects this instance to the given instance using role "output role".
	 * If the given instance is null, nothing happens.
	 * @param outputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void addOutputRole(PDRole outputRole) throws PDStoreException {
		if (outputRole != null) {
			addOutputRole(outputRole.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "output role".
	 * @throws PDStoreException
	 */
	public void removeOutputRole() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleOutputRoleId, 
			pdWorkingCopy.getInstance(this, roleOutputRoleId));
	}

	/**
	 * Removes the link from this instance through role "output role" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.outputRole.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeOutputRole(Object outputRole) throws PDStoreException {
		if (outputRole==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleOutputRoleId, outputRole);
	}

   /**
	 * Connects this instance to the given instance using role "output role".
	 * If there is already an instance connected to this instance through role "output role", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param outputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void setOutputRole(GUID outputRole) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleOutputRoleId, outputRole);	
	}
	/**
	 * Connects this instance to the given instance using role "output role".
	 * If there is already an instance connected to this instance through role "output role", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param outputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void setOutputRole(PDRole outputRole) throws PDStoreException {
		setOutputRole(outputRole.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "input role".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDRole getInputRole() throws PDStoreException {
	 	return (PDRole)pdWorkingCopy.getInstance(this, roleInputRoleId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "input role".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDRole> getInputRoles() throws PDStoreException {
	 	Set<PDRole> result = new HashSet<PDRole>();
	 	GUID PDRoleTypeId = new GUID("528a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleInputRoleId, PDRole.class, PDRoleTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "input role".
	 * If the given instance is null, nothing happens.
	 * @param inputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void addInputRole(GUID inputRole) throws PDStoreException {

			if (inputRole != null) {
				
				pdWorkingCopy.addLink(this.id, roleInputRoleId, inputRole);
			}

	}

	/**
	 * Connects this instance to the given instance using role "input role".
	 * If the given instance is null, nothing happens.
	 * @param inputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void addInputRole(PDRole inputRole) throws PDStoreException {
		if (inputRole != null) {
			addInputRole(inputRole.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "input role".
	 * @throws PDStoreException
	 */
	public void removeInputRole() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleInputRoleId, 
			pdWorkingCopy.getInstance(this, roleInputRoleId));
	}

	/**
	 * Removes the link from this instance through role "input role" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.inputRole.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeInputRole(Object inputRole) throws PDStoreException {
		if (inputRole==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleInputRoleId, inputRole);
	}

   /**
	 * Connects this instance to the given instance using role "input role".
	 * If there is already an instance connected to this instance through role "input role", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param inputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void setInputRole(GUID inputRole) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleInputRoleId, inputRole);	
	}
	/**
	 * Connects this instance to the given instance using role "input role".
	 * If there is already an instance connected to this instance through role "input role", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param inputRole the instance to connect
	 * @throws PDStoreException
	 */
	public void setInputRole(PDRole inputRole) throws PDStoreException {
		setInputRole(inputRole.getId());
	}

}
