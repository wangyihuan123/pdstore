package pdedit.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;


/**
 * Data access class to represent instances of type "node" in memory. Note that
 * this class needs to be registered with PDCache by calling:
 * Class.forName("pdedit.dal.PDNode");
 * 
 * @author PDGen
 */
public class PDNode implements PDInstance {

	public static final GUID typeId = new GUID(
			"4c3064a1952611df91630026bb06e946");

	public static final GUID roleHasXId = new GUID(
			"4c3064a2952611df91630026bb06e946");
	public static final GUID roleHasYId = new GUID(
			"4c3064a3952611df91630026bb06e946");
	public static final GUID roleHasInstanceId = new GUID(
			"4c3064a4952611df91630026bb06e946");
	public static final GUID roleHasTypeId = new GUID(
			"0c9fe4409aa911dfb3fa0026bb06e946");

	static {
		DALClassRegister.addDataClass(typeId, PDNode.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;

	public String toString() {
		String name = getName();
		if (name != null)
			return "PDNode:" + name;
		else
			return "PDNode:" + id;

		// pdWorkingCopy.addLink(modelId, role, "heelllo");
		// pdWorkingCopy.getInstance(modelId, role);
	}


	/**
	 * Creates an PDNode object representing the given instance in the given
	 * cache.
	 * 
	 * @param cache
	 *            the cache the instance should be in
	 * @param id
	 *            GUID of the instance
	 */
	public PDNode(PDWorkingCopy pdWorkingCopy, GUID id) {
		this.pdWorkingCopy = pdWorkingCopy;
		this.id = id;
	}

	/**
	 * Loads an instance object of this type into a cache. If the instance is
	 * already in the cache, the cached instance is returned.
	 * 
	 * @param PDWorkingCopy
	 *            pdWorkingCopy to load the instance into
	 * @param id
	 *            GUID of the instance Do not directly call this method. Use the
	 *            newInstance() method in PDCache which would call this method
	 */
	public static PDNode load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDNode) instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}

	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}

	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}

	/**
	 * Gets the name of this instance. In PDStore every instance can be given a
	 * name.
	 * 
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}

	/**
	 * Sets the name of this instance. In PDStore every instance can be given a
	 * name. If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * 
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}


	/**
	 * Removes the name of this instance. In PDStore every instance can be given
	 * a name. If the instance does not have a name, nothing happens.
	 * 
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}


	/**
	 * Gets the icon of this instance. In PDStore every instance can be given an
	 * icon.
	 * 
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}

	/**
	 * Sets the icon of this instance. In PDStore every instance can be given an
	 * icon. If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * 
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}

	/**
	 * Removes the icon of this instance. In PDStore every instance can be given
	 * an icon. If the instance does not have an icon, nothing happens.
	 * 
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	// Code generated by PDGetSetRemoveGen:

	/**
	 * Connects this instance to the given instance using role "hasX". If there
	 * is already an instance connected to this instance through role "hasX",
	 * the link will be overwritten. If the given instance is null, an existing
	 * link is removed."
	 * 
	 * @param hasX
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void setHasX(Double hasX) throws PDStoreException {
		pdWorkingCopy.setLink(this.id, roleHasXId, hasX);
	}

	/**
	 * Removes the link from this instance through role "hasX".
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasX() throws PDStoreException {
		// PDRole role2Id =
		// (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasXId);
		pdWorkingCopy.removeLink(
				this.id,
				roleHasXId,
				pdWorkingCopy.getInstance(this,
						pdWorkingCopy.load(PDRole.typeId, roleHasXId).getId()));
	}

	/**
	 * Returns the instance connected to this instance through the role "hasX".
	 * 
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	public Double getHasX() throws PDStoreException {
		return (Double) pdWorkingCopy.getInstance(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasXId).getId());
	}

	/**
	 * Connects this instance to the given instance using role "hasX". If the
	 * given instance is null, nothing happens.
	 * 
	 * @param hasX
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void addHasX(Double hasX) throws PDStoreException {

		if (hasX != null) {

			pdWorkingCopy.addLink(this.id, roleHasXId, hasX);
		}

	}

	/**
	 * Removes the link from this instance through role "hasX" to the given
	 * instance, if the link exists. If there is no such link, nothing
	 * happens.hasX.getId() If the given instance is null, nothing happens.
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasX(Object hasX) throws PDStoreException {
		if (hasX == null)
			return;
		pdWorkingCopy.removeLink(this.id, roleHasXId, hasX);
	}

	/**
	 * Returns the instance(s) connected to this instance through the role
	 * "hasX".
	 * 
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	public Collection<Double> getHasXs() throws PDStoreException {
		Set<Double> results = new HashSet<Double>();
		/*
		 * for(Object o : pdWorkingCopy.getInstances(this,
		 * (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasXId))){
		 * results.add((Double)o); }
		 */
		pdWorkingCopy.getInstances(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasXId).getId(),
				Double.class, null, results);
		return results;
	}

	// Code generated by PDGetSetRemoveGen:

	/**
	 * Connects this instance to the given instance using role "hasY". If there
	 * is already an instance connected to this instance through role "hasY",
	 * the link will be overwritten. If the given instance is null, an existing
	 * link is removed."
	 * 
	 * @param hasY
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void setHasY(Double hasY) throws PDStoreException {
		pdWorkingCopy.setLink(this.id, roleHasYId, hasY);
	}

	/**
	 * Removes the link from this instance through role "hasY".
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasY() throws PDStoreException {
		// PDRole role2Id =
		// (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasYId);
		pdWorkingCopy.removeLink(
				this.id,
				roleHasYId,
				pdWorkingCopy.getInstance(this,
						pdWorkingCopy.load(PDRole.typeId, roleHasYId).getId()));
	}

	/**
	 * Returns the instance connected to this instance through the role "hasY".
	 * 
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	public Double getHasY() throws PDStoreException {
		return (Double) pdWorkingCopy.getInstance(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasYId).getId());
	}

	/**
	 * Connects this instance to the given instance using role "hasY". If the
	 * given instance is null, nothing happens.
	 * 
	 * @param hasY
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void addHasY(Double hasY) throws PDStoreException {

		if (hasY != null) {

			pdWorkingCopy.addLink(this.id, roleHasYId, hasY);
		}

	}

	/**
	 * Removes the link from this instance through role "hasY" to the given
	 * instance, if the link exists. If there is no such link, nothing
	 * happens.hasY.getId() If the given instance is null, nothing happens.
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasY(Object hasY) throws PDStoreException {
		if (hasY == null)
			return;
		pdWorkingCopy.removeLink(this.id, roleHasYId, hasY);
	}

	/**
	 * Returns the instance(s) connected to this instance through the role
	 * "hasY".
	 * 
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	public Collection<Double> getHasYs() throws PDStoreException {
		Set<Double> results = new HashSet<Double>();
		/*
		 * for(Object o : pdWorkingCopy.getInstances(this,
		 * (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasYId))){
		 * results.add((Double)o); }
		 */
		pdWorkingCopy.getInstances(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasYId).getId(),
				Double.class, null, results);
		return results;
	}

	// Code generated by PDGetSetRemoveGen:

	/**
	 * Connects this instance to the given instance using role "hasInstance". If
	 * there is already an instance connected to this instance through role
	 * "hasInstance", the link will be overwritten. If the given instance is
	 * null, an existing link is removed."
	 * 
	 * @param hasInstance
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void setHasInstance(String hasInstance) throws PDStoreException {
		pdWorkingCopy.setLink(this.id, roleHasInstanceId, hasInstance);
	}

	/**
	 * Removes the link from this instance through role "hasInstance".
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasInstance() throws PDStoreException {
		// PDRole role2Id =
		// (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasInstanceId);
		pdWorkingCopy.removeLink(this.id, roleHasInstanceId, pdWorkingCopy
				.getInstance(this,
						pdWorkingCopy.load(PDRole.typeId, roleHasInstanceId)
								.getId()));
	}

	/**
	 * Returns the instance connected to this instance through the role
	 * "hasInstance".
	 * 
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	public String getHasInstance() throws PDStoreException {
		return (String) pdWorkingCopy.getInstance(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasInstanceId).getId());
	}

	/**
	 * Connects this instance to the given instance using role "hasInstance". If
	 * the given instance is null, nothing happens.
	 * 
	 * @param hasInstance
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void addHasInstance(String hasInstance) throws PDStoreException {

		if (hasInstance != null) {

			pdWorkingCopy.addLink(this.id, roleHasInstanceId, hasInstance);
		}

	}

	/**
	 * Removes the link from this instance through role "hasInstance" to the
	 * given instance, if the link exists. If there is no such link, nothing
	 * happens.hasInstance.getId() If the given instance is null, nothing
	 * happens.
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasInstance(Object hasInstance) throws PDStoreException {
		if (hasInstance == null)
			return;
		pdWorkingCopy.removeLink(this.id, roleHasInstanceId, hasInstance);
	}

	/**
	 * Returns the instance(s) connected to this instance through the role
	 * "hasInstance".
	 * 
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	public Collection<String> getHasInstances() throws PDStoreException {
		Set<String> results = new HashSet<String>();
		/*
		 * for(Object o : pdWorkingCopy.getInstances(this,
		 * (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasInstanceId))){
		 * results.add((String)o); }
		 */
		pdWorkingCopy.getInstances(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasInstanceId).getId(),
				String.class, null, results);
		return results;
	}

	// Code generated by PDGetSetRemoveGen:

	/**
	 * Connects this instance to the given instance using role "hasType". If
	 * there is already an instance connected to this instance through role
	 * "hasType", the link will be overwritten. If the given instance is null,
	 * an existing link is removed."
	 * 
	 * @param hasType
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void setHasType(String hasType) throws PDStoreException {
		pdWorkingCopy.setLink(this.id, roleHasTypeId, hasType);
	}

	/**
	 * Removes the link from this instance through role "hasType".
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasType() throws PDStoreException {
		// PDRole role2Id =
		// (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasTypeId);
		pdWorkingCopy.removeLink(this.id, roleHasTypeId, pdWorkingCopy
				.getInstance(this,
						pdWorkingCopy.load(PDRole.typeId, roleHasTypeId)
								.getId()));
	}

	/**
	 * Returns the instance connected to this instance through the role
	 * "hasType".
	 * 
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	public String getHasType() throws PDStoreException {
		return (String) pdWorkingCopy.getInstance(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasTypeId).getId());
	}

	/**
	 * Connects this instance to the given instance using role "hasType". If the
	 * given instance is null, nothing happens.
	 * 
	 * @param hasType
	 *            the instance to connect
	 * @throws PDStoreException
	 */
	public void addHasType(String hasType) throws PDStoreException {

		if (hasType != null) {

			pdWorkingCopy.addLink(this.id, roleHasTypeId, hasType);
		}

	}

	/**
	 * Removes the link from this instance through role "hasType" to the given
	 * instance, if the link exists. If there is no such link, nothing
	 * happens.hasType.getId() If the given instance is null, nothing happens.
	 * 
	 * @throws PDStoreException
	 */
	public void removeHasType(Object hasType) throws PDStoreException {
		if (hasType == null)
			return;
		pdWorkingCopy.removeLink(this.id, roleHasTypeId, hasType);
	}

	/**
	 * Returns the instance(s) connected to this instance through the role
	 * "hasType".
	 * 
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	public Collection<String> getHasTypes() throws PDStoreException {
		Set<String> results = new HashSet<String>();
		/*
		 * for(Object o : pdWorkingCopy.getInstances(this,
		 * (PDRole)pdWorkingCopy.load(PDRole.typeId,roleHasTypeId))){
		 * results.add((String)o); }
		 */
		pdWorkingCopy.getInstances(this,
				pdWorkingCopy.load(PDRole.typeId, roleHasTypeId).getId(),
				String.class, null, results);
		return results;
	}

}
