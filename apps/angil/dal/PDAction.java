package angil.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Action" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("angil.dal.PDAction");
 * @author PDGen
 */
public class PDAction implements PDInstance {

	public static final GUID typeId = new GUID("fbc29378374c11e0bfe4001e8c7f9d82"); 

	public static final GUID roleNextPageId = new GUID("005319b136ed11e08144001e8c7f9d82");
	public static final GUID roleRequestURLId = new GUID("005319b236ed11e08144001e8c7f9d82");
	public static final GUID roleProbabilityId = new GUID("005319b336ed11e08144001e8c7f9d82");

	static {
		DALClassRegister.addDataClass(typeId, PDAction.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDAction:" + name;
		else
			return "PDAction:" + id;
	}
	/**
	 * Creates an PDAction object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDAction(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDAction object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDAction(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDAction load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDAction)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "nextPage".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDPage getNextPage() throws PDStoreException {
	 	return (PDPage)pdWorkingCopy.getInstance(this, roleNextPageId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "nextPage".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDPage> getNextPages() throws PDStoreException {
	 	Set<PDPage> result = new HashSet<PDPage>();
	 	GUID PDPageTypeId = new GUID("fbc29377374c11e0bfe4001e8c7f9d82");
		pdWorkingCopy.getInstances(this, roleNextPageId, PDPage.class, PDPageTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "nextPage".
	 * If the given instance is null, nothing happens.
	 * @param nextPage the instance to connect
	 * @throws PDStoreException
	 */
	public void addNextPage(GUID nextPage) throws PDStoreException {

			if (nextPage != null) {
				
				pdWorkingCopy.addLink(this.id, roleNextPageId, nextPage);
			}

	}

	/**
	 * Connects this instance to the given instance using role "nextPage".
	 * If the given instance is null, nothing happens.
	 * @param nextPage the instance to connect
	 * @throws PDStoreException
	 */
	public void addNextPage(PDPage nextPage) throws PDStoreException {
		if (nextPage != null) {
			addNextPage(nextPage.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "nextPage".
	 * @throws PDStoreException
	 */
	public void removeNextPage() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleNextPageId, 
			pdWorkingCopy.getInstance(this, roleNextPageId));
	}

	/**
	 * Removes the link from this instance through role "nextPage" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.nextPage.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeNextPage(Object nextPage) throws PDStoreException {
		if (nextPage==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleNextPageId, nextPage);
	}

   /**
	 * Connects this instance to the given instance using role "nextPage".
	 * If there is already an instance connected to this instance through role "nextPage", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param nextPage the instance to connect
	 * @throws PDStoreException
	 */
	public void setNextPage(GUID nextPage) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleNextPageId, nextPage);	
	}
	/**
	 * Connects this instance to the given instance using role "nextPage".
	 * If there is already an instance connected to this instance through role "nextPage", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param nextPage the instance to connect
	 * @throws PDStoreException
	 */
	public void setNextPage(PDPage nextPage) throws PDStoreException {
		setNextPage(nextPage.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "requestURL".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getRequestURL() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleRequestURLId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "requestURL".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getRequestURLs() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleRequestURLId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "requestURL".
	 * If the given instance is null, nothing happens.
	 * @param requestURL the instance to connect
	 * @throws PDStoreException
	 */
	public void addRequestURL(String requestURL) throws PDStoreException {

			if (requestURL != null) {
				
				pdWorkingCopy.addLink(this.id, roleRequestURLId, requestURL);
			}

	}


	/**
	 * Removes the link from this instance through role "requestURL".
	 * @throws PDStoreException
	 */
	public void removeRequestURL() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleRequestURLId, 
			pdWorkingCopy.getInstance(this, roleRequestURLId));
	}

	/**
	 * Removes the link from this instance through role "requestURL" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.requestURL.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeRequestURL(Object requestURL) throws PDStoreException {
		if (requestURL==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleRequestURLId, requestURL);
	}

   /**
	 * Connects this instance to the given instance using role "requestURL".
	 * If there is already an instance connected to this instance through role "requestURL", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param requestURL the instance to connect
	 * @throws PDStoreException
	 */
	public void setRequestURL(String requestURL) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleRequestURLId, requestURL);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "probability".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public Double getProbability() throws PDStoreException {
	 	return (Double)pdWorkingCopy.getInstance(this, roleProbabilityId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "probability".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<Double> getProbabilitys() throws PDStoreException {
	 	Set<Double> result = new HashSet<Double>();
	 	GUID DoubleTypeId = new GUID("4c8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleProbabilityId, Double.class, DoubleTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "probability".
	 * If the given instance is null, nothing happens.
	 * @param probability the instance to connect
	 * @throws PDStoreException
	 */
	public void addProbability(Double probability) throws PDStoreException {

			if (probability != null) {
				
				pdWorkingCopy.addLink(this.id, roleProbabilityId, probability);
			}

	}


	/**
	 * Removes the link from this instance through role "probability".
	 * @throws PDStoreException
	 */
	public void removeProbability() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleProbabilityId, 
			pdWorkingCopy.getInstance(this, roleProbabilityId));
	}

	/**
	 * Removes the link from this instance through role "probability" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.probability.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeProbability(Object probability) throws PDStoreException {
		if (probability==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleProbabilityId, probability);
	}

   /**
	 * Connects this instance to the given instance using role "probability".
	 * If there is already an instance connected to this instance through role "probability", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param probability the instance to connect
	 * @throws PDStoreException
	 */
	public void setProbability(Double probability) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleProbabilityId, probability);	
	}
}
