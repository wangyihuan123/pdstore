package texteditor.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Operation" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("texteditor.dal.PDOperation");
 * @author PDGen
 */
public class PDOperation implements PDInstance {

	public static final GUID typeId = new GUID("3c08266154d111e09c2a001e6805726d"); 

	public static final GUID roleUserId = new GUID("913dc29d5a6711e0b82c001e6805726d");
	public static final GUID roleTimeStampId = new GUID("3c08266854d111e09c2a001e6805726d");
	public static final GUID roleSuperParameterId = new GUID("3c08266a54d111e09c2a001e6805726d");
	public static final GUID roleHistoryId = new GUID("3c08266754d111e09c2a001e6805726c");
	public static final GUID roleCommandId = new GUID("3c08266954d111e09c2a001e6805726d");

	static {
		DALClassRegister.addDataClass(typeId, PDOperation.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDOperation:" + name;
		else
			return "PDOperation:" + id;
	}
	/**
	 * Creates an PDOperation object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDOperation(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDOperation object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDOperation(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDOperation load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDOperation)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "user".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getUser() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleUserId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "user".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getUsers() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleUserId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "user".
	 * If the given instance is null, nothing happens.
	 * @param user the instance to connect
	 * @throws PDStoreException
	 */
	public void addUser(String user) throws PDStoreException {

			if (user != null) {
				
				pdWorkingCopy.addLink(this.id, roleUserId, user);
			}

	}


	/**
	 * Removes the link from this instance through role "user".
	 * @throws PDStoreException
	 */
	public void removeUser() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleUserId, 
			pdWorkingCopy.getInstance(this, roleUserId));
	}

	/**
	 * Removes the link from this instance through role "user" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.user.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeUser(Object user) throws PDStoreException {
		if (user==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleUserId, user);
	}

   /**
	 * Connects this instance to the given instance using role "user".
	 * If there is already an instance connected to this instance through role "user", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param user the instance to connect
	 * @throws PDStoreException
	 */
	public void setUser(String user) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleUserId, user);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "timeStamp".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public Long getTimeStamp() throws PDStoreException {
	 	return (Long)pdWorkingCopy.getInstance(this, roleTimeStampId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "timeStamp".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<Long> getTimeStamps() throws PDStoreException {
	 	Set<Long> result = new HashSet<Long>();
	 	GUID LongTypeId = new GUID("4b8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleTimeStampId, Long.class, LongTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "timeStamp".
	 * If the given instance is null, nothing happens.
	 * @param timeStamp the instance to connect
	 * @throws PDStoreException
	 */
	public void addTimeStamp(Long timeStamp) throws PDStoreException {

			if (timeStamp != null) {
				
				pdWorkingCopy.addLink(this.id, roleTimeStampId, timeStamp);
			}

	}


	/**
	 * Removes the link from this instance through role "timeStamp".
	 * @throws PDStoreException
	 */
	public void removeTimeStamp() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleTimeStampId, 
			pdWorkingCopy.getInstance(this, roleTimeStampId));
	}

	/**
	 * Removes the link from this instance through role "timeStamp" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.timeStamp.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeTimeStamp(Object timeStamp) throws PDStoreException {
		if (timeStamp==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleTimeStampId, timeStamp);
	}

   /**
	 * Connects this instance to the given instance using role "timeStamp".
	 * If there is already an instance connected to this instance through role "timeStamp", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param timeStamp the instance to connect
	 * @throws PDStoreException
	 */
	public void setTimeStamp(Long timeStamp) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleTimeStampId, timeStamp);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "superParameter".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDInstance getSuperParameter() throws PDStoreException {
	 	return (PDInstance)pdWorkingCopy.getInstance(this, roleSuperParameterId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "superParameter".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDInstance> getSuperParameters() throws PDStoreException {
	 	Set<PDInstance> result = new HashSet<PDInstance>();
	 	GUID PDInstanceTypeId = new GUID("70da26e0fc3711dfa87b842b2b9af4fd");
		pdWorkingCopy.getInstances(this, roleSuperParameterId, PDInstance.class, PDInstanceTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "superParameter".
	 * If the given instance is null, nothing happens.
	 * @param superParameter the instance to connect
	 * @throws PDStoreException
	 */
	public void addSuperParameter(GUID superParameter) throws PDStoreException {

			if (superParameter != null) {
				
				pdWorkingCopy.addLink(this.id, roleSuperParameterId, superParameter);
			}

	}

	/**
	 * Connects this instance to the given instance using role "superParameter".
	 * If the given instance is null, nothing happens.
	 * @param superParameter the instance to connect
	 * @throws PDStoreException
	 */
	public void addSuperParameter(PDInstance superParameter) throws PDStoreException {
		if (superParameter != null) {
			addSuperParameter(superParameter.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "superParameter".
	 * @throws PDStoreException
	 */
	public void removeSuperParameter() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleSuperParameterId, 
			pdWorkingCopy.getInstance(this, roleSuperParameterId));
	}

	/**
	 * Removes the link from this instance through role "superParameter" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.superParameter.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeSuperParameter(Object superParameter) throws PDStoreException {
		if (superParameter==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleSuperParameterId, superParameter);
	}

   /**
	 * Connects this instance to the given instance using role "superParameter".
	 * If there is already an instance connected to this instance through role "superParameter", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param superParameter the instance to connect
	 * @throws PDStoreException
	 */
	public void setSuperParameter(GUID superParameter) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleSuperParameterId, superParameter);	
	}
	/**
	 * Connects this instance to the given instance using role "superParameter".
	 * If there is already an instance connected to this instance through role "superParameter", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param superParameter the instance to connect
	 * @throws PDStoreException
	 */
	public void setSuperParameter(PDInstance superParameter) throws PDStoreException {
		setSuperParameter(superParameter.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "History".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDHistory getHistory() throws PDStoreException {
	 	return (PDHistory)pdWorkingCopy.getInstance(this, roleHistoryId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "History".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDHistory> getHistorys() throws PDStoreException {
	 	Set<PDHistory> result = new HashSet<PDHistory>();
	 	GUID PDHistoryTypeId = new GUID("3c08266054d111e09c2a001e6805726d");
		pdWorkingCopy.getInstances(this, roleHistoryId, PDHistory.class, PDHistoryTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "History".
	 * If the given instance is null, nothing happens.
	 * @param history the instance to connect
	 * @throws PDStoreException
	 */
	public void addHistory(GUID history) throws PDStoreException {

			if (history != null) {
				
				pdWorkingCopy.addLink(this.id, roleHistoryId, history);
			}

	}

	/**
	 * Connects this instance to the given instance using role "History".
	 * If the given instance is null, nothing happens.
	 * @param history the instance to connect
	 * @throws PDStoreException
	 */
	public void addHistory(PDHistory history) throws PDStoreException {
		if (history != null) {
			addHistory(history.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "History".
	 * @throws PDStoreException
	 */
	public void removeHistory() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleHistoryId, 
			pdWorkingCopy.getInstance(this, roleHistoryId));
	}

	/**
	 * Removes the link from this instance through role "History" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.history.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeHistory(Object history) throws PDStoreException {
		if (history==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleHistoryId, history);
	}

   /**
	 * Connects this instance to the given instance using role "History".
	 * If there is already an instance connected to this instance through role "History", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param history the instance to connect
	 * @throws PDStoreException
	 */
	public void setHistory(GUID history) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleHistoryId, history);	
	}
	/**
	 * Connects this instance to the given instance using role "History".
	 * If there is already an instance connected to this instance through role "History", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param history the instance to connect
	 * @throws PDStoreException
	 */
	public void setHistory(PDHistory history) throws PDStoreException {
		setHistory(history.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "command".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getCommand() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleCommandId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "command".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getCommands() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleCommandId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "command".
	 * If the given instance is null, nothing happens.
	 * @param command the instance to connect
	 * @throws PDStoreException
	 */
	public void addCommand(String command) throws PDStoreException {

			if (command != null) {
				
				pdWorkingCopy.addLink(this.id, roleCommandId, command);
			}

	}


	/**
	 * Removes the link from this instance through role "command".
	 * @throws PDStoreException
	 */
	public void removeCommand() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleCommandId, 
			pdWorkingCopy.getInstance(this, roleCommandId));
	}

	/**
	 * Removes the link from this instance through role "command" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.command.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeCommand(Object command) throws PDStoreException {
		if (command==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleCommandId, command);
	}

   /**
	 * Connects this instance to the given instance using role "command".
	 * If there is already an instance connected to this instance through role "command", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param command the instance to connect
	 * @throws PDStoreException
	 */
	public void setCommand(String command) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleCommandId, command);	
	}
}
