package pdqueue.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Item" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("pdqueue.dal.PDItem");
 * @author PDGen
 */
public class PDItem implements PDInstance {

	public static final GUID typeId = new GUID("b3bba7cbd80911e0b63d0024e80616c7"); 

	public static final GUID roleMessageId = new GUID("899ecc70d76111e09b030024e80616c7");
	public static final GUID roleQueueId = new GUID("899ecc6cd76111e09b030024e80616c6");
	public static final GUID roleSenderId = new GUID("7e2e063014bf11e18cea0024e80616c7");
	public static final GUID roleReceiverId = new GUID("899ecc6fd76111e09b030024e80616c7");
	public static final GUID roleStateId = new GUID("b3bba7d2d80911e0b63d0024e80616c7");
	public static final GUID roleTimeId = new GUID("899ecc6ed76111e09b030024e80616c7");

	static {
		DALClassRegister.addDataClass(typeId, PDItem.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDItem:" + name;
		else
			return "PDItem:" + id;
	}
	/**
	 * Creates an PDItem object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDItem(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDItem object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDItem(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDItem load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDItem)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "Message".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getMessage() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleMessageId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "Message".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getMessages() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleMessageId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "Message".
	 * If the given instance is null, nothing happens.
	 * @param message the instance to connect
	 * @throws PDStoreException
	 */
	public void addMessage(String message) throws PDStoreException {

			if (message != null) {
				
				pdWorkingCopy.addLink(this.id, roleMessageId, message);
			}

	}


	/**
	 * Removes the link from this instance through role "Message".
	 * @throws PDStoreException
	 */
	public void removeMessage() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleMessageId, 
			pdWorkingCopy.getInstance(this, roleMessageId));
	}

	/**
	 * Removes the link from this instance through role "Message" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.message.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeMessage(Object message) throws PDStoreException {
		if (message==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleMessageId, message);
	}

   /**
	 * Connects this instance to the given instance using role "Message".
	 * If there is already an instance connected to this instance through role "Message", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param message the instance to connect
	 * @throws PDStoreException
	 */
	public void setMessage(String message) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleMessageId, message);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "Queue".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDQueue getQueue() throws PDStoreException {
	 	return (PDQueue)pdWorkingCopy.getInstance(this, roleQueueId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "Queue".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDQueue> getQueues() throws PDStoreException {
	 	Set<PDQueue> result = new HashSet<PDQueue>();
	 	GUID PDQueueTypeId = new GUID("0774e9a8540f11e0a4530024e80616c7");
		pdWorkingCopy.getInstances(this, roleQueueId, PDQueue.class, PDQueueTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "Queue".
	 * If the given instance is null, nothing happens.
	 * @param queue the instance to connect
	 * @throws PDStoreException
	 */
	public void addQueue(GUID queue) throws PDStoreException {

			if (queue != null) {
				
				pdWorkingCopy.addLink(this.id, roleQueueId, queue);
			}

	}

	/**
	 * Connects this instance to the given instance using role "Queue".
	 * If the given instance is null, nothing happens.
	 * @param queue the instance to connect
	 * @throws PDStoreException
	 */
	public void addQueue(PDQueue queue) throws PDStoreException {
		if (queue != null) {
			addQueue(queue.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "Queue".
	 * @throws PDStoreException
	 */
	public void removeQueue() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleQueueId, 
			pdWorkingCopy.getInstance(this, roleQueueId));
	}

	/**
	 * Removes the link from this instance through role "Queue" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.queue.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeQueue(Object queue) throws PDStoreException {
		if (queue==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleQueueId, queue);
	}

   /**
	 * Connects this instance to the given instance using role "Queue".
	 * If there is already an instance connected to this instance through role "Queue", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param queue the instance to connect
	 * @throws PDStoreException
	 */
	public void setQueue(GUID queue) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleQueueId, queue);	
	}
	/**
	 * Connects this instance to the given instance using role "Queue".
	 * If there is already an instance connected to this instance through role "Queue", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param queue the instance to connect
	 * @throws PDStoreException
	 */
	public void setQueue(PDQueue queue) throws PDStoreException {
		setQueue(queue.getId());
	}

  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "Sender".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getSender() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleSenderId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "Sender".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getSenders() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleSenderId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "Sender".
	 * If the given instance is null, nothing happens.
	 * @param sender the instance to connect
	 * @throws PDStoreException
	 */
	public void addSender(String sender) throws PDStoreException {

			if (sender != null) {
				
				pdWorkingCopy.addLink(this.id, roleSenderId, sender);
			}

	}


	/**
	 * Removes the link from this instance through role "Sender".
	 * @throws PDStoreException
	 */
	public void removeSender() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleSenderId, 
			pdWorkingCopy.getInstance(this, roleSenderId));
	}

	/**
	 * Removes the link from this instance through role "Sender" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.sender.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeSender(Object sender) throws PDStoreException {
		if (sender==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleSenderId, sender);
	}

   /**
	 * Connects this instance to the given instance using role "Sender".
	 * If there is already an instance connected to this instance through role "Sender", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param sender the instance to connect
	 * @throws PDStoreException
	 */
	public void setSender(String sender) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleSenderId, sender);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "Receiver".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getReceiver() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleReceiverId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "Receiver".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getReceivers() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleReceiverId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "Receiver".
	 * If the given instance is null, nothing happens.
	 * @param receiver the instance to connect
	 * @throws PDStoreException
	 */
	public void addReceiver(String receiver) throws PDStoreException {

			if (receiver != null) {
				
				pdWorkingCopy.addLink(this.id, roleReceiverId, receiver);
			}

	}


	/**
	 * Removes the link from this instance through role "Receiver".
	 * @throws PDStoreException
	 */
	public void removeReceiver() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleReceiverId, 
			pdWorkingCopy.getInstance(this, roleReceiverId));
	}

	/**
	 * Removes the link from this instance through role "Receiver" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.receiver.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeReceiver(Object receiver) throws PDStoreException {
		if (receiver==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleReceiverId, receiver);
	}

   /**
	 * Connects this instance to the given instance using role "Receiver".
	 * If there is already an instance connected to this instance through role "Receiver", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param receiver the instance to connect
	 * @throws PDStoreException
	 */
	public void setReceiver(String receiver) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleReceiverId, receiver);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "State".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getState() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleStateId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "State".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getStates() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleStateId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "State".
	 * If the given instance is null, nothing happens.
	 * @param state the instance to connect
	 * @throws PDStoreException
	 */
	public void addState(String state) throws PDStoreException {

			if (state != null) {
				
				pdWorkingCopy.addLink(this.id, roleStateId, state);
			}

	}


	/**
	 * Removes the link from this instance through role "State".
	 * @throws PDStoreException
	 */
	public void removeState() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleStateId, 
			pdWorkingCopy.getInstance(this, roleStateId));
	}

	/**
	 * Removes the link from this instance through role "State" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.state.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeState(Object state) throws PDStoreException {
		if (state==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleStateId, state);
	}

   /**
	 * Connects this instance to the given instance using role "State".
	 * If there is already an instance connected to this instance through role "State", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param state the instance to connect
	 * @throws PDStoreException
	 */
	public void setState(String state) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleStateId, state);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "Time".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public Date getTime() throws PDStoreException {
	 	return (Date)pdWorkingCopy.getInstance(this, roleTimeId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "Time".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<Date> getTimes() throws PDStoreException {
	 	Set<Date> result = new HashSet<Date>();
	 	GUID DateTypeId = new GUID("4e8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleTimeId, Date.class, DateTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "Time".
	 * If the given instance is null, nothing happens.
	 * @param time the instance to connect
	 * @throws PDStoreException
	 */
	public void addTime(Date time) throws PDStoreException {

			if (time != null) {
				
				pdWorkingCopy.addLink(this.id, roleTimeId, time);
			}

	}


	/**
	 * Removes the link from this instance through role "Time".
	 * @throws PDStoreException
	 */
	public void removeTime() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleTimeId, 
			pdWorkingCopy.getInstance(this, roleTimeId));
	}

	/**
	 * Removes the link from this instance through role "Time" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.time.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeTime(Object time) throws PDStoreException {
		if (time==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleTimeId, time);
	}

   /**
	 * Connects this instance to the given instance using role "Time".
	 * If there is already an instance connected to this instance through role "Time", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param time the instance to connect
	 * @throws PDStoreException
	 */
	public void setTime(Date time) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleTimeId, time);	
	}
}
