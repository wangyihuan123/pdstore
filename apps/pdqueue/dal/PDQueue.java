package pdqueue.dal;

import java.util.*;
import pdstore.*;
import pdstore.dal.*;

/**
 * Data access class to represent instances of type "Queue" in memory.
 * Note that this class needs to be registered with PDCache by calling:
 *    Class.forName("pdqueue.dal.PDQueue");
 * @author PDGen
 */
public class PDQueue implements PDInstance {

	public static final GUID typeId = new GUID("0774e9a8540f11e0a4530024e80616c7"); 

	public static final GUID roleServiceTypeId = new GUID("27070a41100111e1aee00024e80616c7");
	public static final GUID roleItemId = new GUID("899ecc6cd76111e09b030024e80616c7");

	static {
		DALClassRegister.addDataClass(typeId, PDQueue.class);
	}
	private PDWorkingCopy pdWorkingCopy;
	private GUID id;
	public String toString() {
		String name = getName();
		if(name!=null)
			return "PDQueue:" + name;
		else
			return "PDQueue:" + id;
	}
	/**
	 * Creates an PDQueue object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 */
	public PDQueue(PDWorkingCopy workingCopy) {
		this(workingCopy, new GUID());
	}
	
	/**
	 * Creates an PDQueue object representing the given instance in the given cache.
	 * @param workingCopy the working copy the instance should be in
	 * @param id GUID of the instance
	 */
	public PDQueue(PDWorkingCopy workingCopy, GUID id) {
		this.pdWorkingCopy = workingCopy;
		this.id = id;
		
		
	}
	/**
	 * Loads an instance object of this type into a cache.
	 * If the instance is already in the cache, the cached instance is returned.
	 * @param PDWorkingCopy pdWorkingCopy to load the instance into
	 * @param id GUID of the instance
	 * Do not directly call this method. Use the newInstance() method in PDCache which would call this method
	 */
	public static PDQueue load(PDWorkingCopy pdWorkingCopy, GUID id) {
		PDInstance instance = pdWorkingCopy.load(typeId, id);
		return (PDQueue)instance;
	}

	/**
	 * Gets the pdWorkingCopy this object is stored in.
	 */
	public PDWorkingCopy getPDWorkingCopy() {
		return pdWorkingCopy;
	}
	/**
	 * Gets the GUID of the instance represented by this object.
	 */
	public GUID getId() {
		return id;
	}
	/**
	 * Gets the GUID of the type of the instance represented by this object.
	 */
	public GUID getTypeId() {
		return typeId;
	}
	/**
	 * Gets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * @return name the instance name
	 * @throws PDStoreException
	 */
	public String getName() throws PDStoreException {
		return pdWorkingCopy.getName(id);
	}
	/**
	 * Sets the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance already has a name, the name will be overwritten.
	 * If the given name is null, an existing name will be removed.
	 * @return name the new instance name
	 * @throws PDStoreException
	 */
	public void setName(String name) throws PDStoreException {
		pdWorkingCopy.setName(id, name);
	}
	/**
	 * Removes the name of this instance.
	 * In PDStore every instance can be given a name.
	 * If the instance does not have a name, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeName() throws PDStoreException {
		pdWorkingCopy.removeName(id);
	}
	/**
	 * Gets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * @return icon the instance icon
	 * @throws PDStoreException
	 */
	public Blob getIcon() throws PDStoreException {
		return pdWorkingCopy.getIcon(id);
	}
	/**
	 * Sets the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance already has an icon, the icon will be overwritten.
	 * If the given icon is null, an existing icon will be removed.
	 * @return icon the new instance icon
	 * @throws PDStoreException
	 */
	public void setIcon(Blob icon) throws PDStoreException {
		pdWorkingCopy.setIcon(id, icon);
	}
	/**
	 * Removes the icon of this instance.
	 * In PDStore every instance can be given an icon.
	 * If the instance does not have an icon, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeIcon() throws PDStoreException {
		pdWorkingCopy.removeIcon(id);
	}

	
	  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "ServiceType".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public String getServiceType() throws PDStoreException {
	 	return (String)pdWorkingCopy.getInstance(this, roleServiceTypeId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "ServiceType".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<String> getServiceTypes() throws PDStoreException {
	 	Set<String> result = new HashSet<String>();
	 	GUID StringTypeId = new GUID("4a8a986c4062db11afc0b95b08f50e2f");
		pdWorkingCopy.getInstances(this, roleServiceTypeId, String.class, StringTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "ServiceType".
	 * If the given instance is null, nothing happens.
	 * @param serviceType the instance to connect
	 * @throws PDStoreException
	 */
	public void addServiceType(String serviceType) throws PDStoreException {

			if (serviceType != null) {
				
				pdWorkingCopy.addLink(this.id, roleServiceTypeId, serviceType);
			}

	}


	/**
	 * Removes the link from this instance through role "ServiceType".
	 * @throws PDStoreException
	 */
	public void removeServiceType() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleServiceTypeId, 
			pdWorkingCopy.getInstance(this, roleServiceTypeId));
	}

	/**
	 * Removes the link from this instance through role "ServiceType" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.serviceType.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeServiceType(Object serviceType) throws PDStoreException {
		if (serviceType==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleServiceTypeId, serviceType);
	}

   /**
	 * Connects this instance to the given instance using role "ServiceType".
	 * If there is already an instance connected to this instance through role "ServiceType", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param serviceType the instance to connect
	 * @throws PDStoreException
	 */
	public void setServiceType(String serviceType) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleServiceTypeId, serviceType);	
	}
  // Code generated by PDGetSetRemoveGen:


	/**
	 * Returns the instance connected to this instance through the role "Item".
	 * @return the connected instance
	 * @throws PDStoreException
	 */
	 public PDItem getItem() throws PDStoreException {
	 	return (PDItem)pdWorkingCopy.getInstance(this, roleItemId);
	 }

	/**
	 * Returns the instance(s) connected to this instance through the role "Item".
	 * @return the connected instance(s)
	 * @throws PDStoreException
	 */
	 public Collection<PDItem> getItems() throws PDStoreException {
	 	Set<PDItem> result = new HashSet<PDItem>();
	 	GUID PDItemTypeId = new GUID("b3bba7cbd80911e0b63d0024e80616c7");
		pdWorkingCopy.getInstances(this, roleItemId, PDItem.class, PDItemTypeId, result);
	 	return result;
	 }
	 
   /**
	 * Connects this instance to the given instance using role "Item".
	 * If the given instance is null, nothing happens.
	 * @param item the instance to connect
	 * @throws PDStoreException
	 */
	public void addItem(GUID item) throws PDStoreException {

			if (item != null) {
				
				pdWorkingCopy.addLink(this.id, roleItemId, item);
			}

	}

	/**
	 * Connects this instance to the given instance using role "Item".
	 * If the given instance is null, nothing happens.
	 * @param item the instance to connect
	 * @throws PDStoreException
	 */
	public void addItem(PDItem item) throws PDStoreException {
		if (item != null) {
			addItem(item.getId());
		}		
	}

	/**
	 * Removes the link from this instance through role "Item".
	 * @throws PDStoreException
	 */
	public void removeItem() throws PDStoreException {
		pdWorkingCopy.removeLink(this.id, roleItemId, 
			pdWorkingCopy.getInstance(this, roleItemId));
	}

	/**
	 * Removes the link from this instance through role "Item" to the given instance, if the link exists.
	 * If there is no such link, nothing happens.item.getId()
	 * If the given instance is null, nothing happens.
	 * @throws PDStoreException
	 */
	public void removeItem(Object item) throws PDStoreException {
		if (item==null)
			return;
		pdWorkingCopy.removeLink(this.id, roleItemId, item);
	}

   /**
	 * Connects this instance to the given instance using role "Item".
	 * If there is already an instance connected to this instance through role "Item", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param item the instance to connect
	 * @throws PDStoreException
	 */
	public void setItem(GUID item) throws PDStoreException {
		pdWorkingCopy.setLink(this.id,  roleItemId, item);	
	}
	/**
	 * Connects this instance to the given instance using role "Item".
	 * If there is already an instance connected to this instance through role "Item", the link will be overwritten.
	 * If the given instance is null, an existing link is removed."
	 * @param item the instance to connect
	 * @throws PDStoreException
	 */
	public void setItem(PDItem item) throws PDStoreException {
		setItem(item.getId());
	}

}
